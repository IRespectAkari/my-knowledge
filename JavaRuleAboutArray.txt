------------------------------------------------------
配列

 初期化していない場合、配列には規定値が設定されており、

 int, long : 0
 double : 0.0
 boolean : false
 String : null

 となっている。
------------------------------------------
「配列の宣言」
型名[] 変数名;
int[] num;

「配列の作成」
変数名 = new 型名[要素数];
num = new int[5];

「配列の宣言と作成」
型名[] 変数名 = new 型名[要素数];
int[] num = new int[3];

「配列の初期化」
変数名 = new 型名[]{値1, 値2, ...};
num = new int[]{4, 10, 7};

「配列の宣言と作成と初期化」
型名[] 変数名 = {値1, 値2, ...};
int[] num = {4, 10, 7};

「配列の長さ」
変数名.length
num.length // 3

------------------------------------------
多次元配列
------------------------------------------
「多次元配列の宣言」
型名[][] 変数名;
int[][] num2;

「多次元配列の作成」
変数名 = new 型名[要素数][];
変数名 = new 型名[要素数][要素数];
num = new int[2][];
num = new int[2][3];

「多次元配列内の配列の作成」
変数名[配列番号] = new 型名[要素数];
num[0] = new int[3];

「多次元配列の宣言と作成」
型名[][] 変数名 = new 型名[要素数][];
型名[][] 変数名 = new 型名[要素数][要素数];
int[][] num = new int[2][];
int[][] num = new int[2][3];

「多次元配列の初期化」
変数名 = new 型名[][]{
  {値1_1, 値1_2, ...},
  {値2_1, 値2_2, ...}
};
num = new int[][]{
  {87, 54, 67},
  {76, 92, 48}
};

「多次元配列の宣言と作成と初期化 - その1」
型名[][] 変数名 = {
  {値1_1, 値1_2, ...},
  {値2_1, 値2_2, ...}
};
int[][] num = {
  {87, 54, 67},
  {76, 92, 48}
};

「多次元配列の宣言と作成と初期化 - その2」
int[] num1 = {87, 54, 67};
int[] num2 = {76, 92, 48};
int[][] num = {num1, num2};

「多次元配列の長さ」
変数名.length
num.length // 2（一番外側の配列の要素数）
変数名[配列番号].length
num[0].length // 3（num[0] に格納されている要素数）
num[1].length // 3（num[1] に格納されている要素数）

------------------------------------------------------
論理演算子
------------------------------------------
&& は"かつ"、|| は"又は"

------------------------------------------------------



------------------------------------------------------



------------------------------------------------------


















